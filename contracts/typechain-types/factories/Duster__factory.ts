/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Duster, DusterInterface } from "../Duster";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "dust",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "pull",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105398061007e6000396000f3fe60806040526004361061005e5760003560e01c8063715018a611610043578063715018a61461009f5780638da5cb5b146100b4578063f2fde38b146100ed57600080fd5b806305e1c0f01461006a5780634d0392a81461007f57600080fd5b3661006557005b600080fd5b61007d6100783660046103a4565b61010d565b005b34801561008b57600080fd5b5061007d61009a36600461041f565b6101a5565b3480156100ab57600080fd5b5061007d6101de565b3480156100c057600080fd5b506000546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100f957600080fd5b5061007d610108366004610438565b6101f2565b6101156102ae565b60005b8281101561019f5783838281811061013257610132610475565b90506020020160208101906101479190610438565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561018c573d6000803e3d6000fd5b5080610197816104a4565b915050610118565b50505050565b6101ad6102ae565b604051339082156108fc029083906000818181858888f193505050501580156101da573d6000803e3d6000fd5b5050565b6101e66102ae565b6101f0600061032f565b565b6101fa6102ae565b73ffffffffffffffffffffffffffffffffffffffff81166102a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ab8161032f565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000604084860312156103b957600080fd5b833567ffffffffffffffff808211156103d157600080fd5b818601915086601f8301126103e557600080fd5b8135818111156103f457600080fd5b8760208260051b850101111561040957600080fd5b6020928301989097509590910135949350505050565b60006020828403121561043157600080fd5b5035919050565b60006020828403121561044a57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461046e57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220d18a7b528d52df799a3b61a8bcef8e0d87c07f24cd98a13f907cae48d39394f264736f6c63430008100033";

type DusterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DusterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Duster__factory extends ContractFactory {
  constructor(...args: DusterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Duster";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Duster> {
    return super.deploy(overrides || {}) as Promise<Duster>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Duster {
    return super.attach(address) as Duster;
  }
  connect(signer: Signer): Duster__factory {
    return super.connect(signer) as Duster__factory;
  }
  static readonly contractName: "Duster";
  public readonly contractName: "Duster";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DusterInterface {
    return new utils.Interface(_abi) as DusterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Duster {
    return new Contract(address, _abi, signerOrProvider) as Duster;
  }
}
